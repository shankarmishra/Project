<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 0;
            text-align: center;
            color: #333;
        }

        nav {
            background-color: #4CAF50;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 30px;
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            box-sizing: border-box;
        }

        .nav-links {
            display: flex;
            gap: 20px;
            color: #f5f5f5;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 5px 10px;
            border-radius: 4px;
            transition: background-color 0.3s;
        }

        .nav-links a:hover {
            background-color: rgba(0, 0, 0, 0.2);
        }

        .container {
            margin: 100px auto 20px;
            padding: 20px;
            max-width: 1200px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        #cart-summary, #delivery-info {
            border: 1px solid #ddd;
            padding: 20px;
            margin: 20px auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-width: 800px;
        }

        .cart-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #eee;
            background-color: #fff;
            margin: 10px 0;
            border-radius: 8px;
        }

        .cart-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            margin-right: 15px;
            border-radius: 8px;
        }

        .item-name, .item-price {
            font-weight: bold;
            color: #333;
            margin: 5px 0;
        }

        .item-description {
            font-size: 0.9em;
            color: #777;
            margin-top: 5px;
        }

        input, button {
            margin: 10px 0;
            padding: 12px;
            width: 100%;
            border-radius: 4px;
            font-size: 16px;
            box-sizing: border-box;
        }

        input {
            border: 1px solid #ddd;
            background-color: #fff;
            color: #333;
        }

        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
            max-width: 800px;
            margin: 20px auto;
            display: block;
        }

        button:hover {
            background-color: #45a049;
        }

        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .total-section {
            font-size: 1.2em;
            padding: 15px 0;
            border-top: 2px solid #eee;
            margin-top: 15px;
        }

        .error-message {
            color: #ff5722;
            font-size: 1.1em;
            margin: 20px auto;
            padding: 10px;
            background-color: #ffebee;
            border-radius: 4px;
            display: none;
            max-width: 800px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #ddd;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
            position: relative;
        }

        .modal-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 12px;
            cursor: pointer;
            width: 100%;
            border-radius: 4px;
            margin-top: 15px;
            font-size: 16px;
        }

        .modal-button:hover {
            background-color: #45a049;
        }

        .loading {
            display: none;
            margin: 20px auto;
            padding: 10px;
            text-align: center;
            font-weight: bold;
            color: #4CAF50;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            #cart-summary, #delivery-info {
                width: 95%;
                margin: 10px auto;
                padding: 15px;
            }

            .cart-item {
                flex-direction: column;
                text-align: center;
            }

            .cart-item img {
                margin: 0 0 10px 0;
            }

            .modal-content {
                width: 90%;
                margin: 30% auto;
            }

            nav {
                padding: 10px 15px;
            }

            .nav-links {
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <nav>
        <div class="nav-links">
            <a href="/">Home</a>
            <a href="/cart">Cart</a>
            <a href="/orders">Orders</a>
            <a href="#" id="logout-link">Logout</a>
        </div>
    </nav>

    <div class="container">
        <h2>Checkout Page</h2>

        <div id="cart-summary">
            <p><strong>Items in your cart</strong></p>
            <div id="cart-items"></div>
            <div class="total-section">
                <p>Total: ₹<span id="total-amount">0</span></p>
            </div>
        </div>

        <div id="delivery-info">
            <label for="address">Delivery Address:</label>
            <input type="text" id="address" placeholder="Enter your complete delivery address" required>
        </div>

        <button id="pay-button">Proceed to Payment</button>
        <div id="loading" class="loading">Processing payment...</div>
        <div id="error-message" class="error-message"></div>

        <!-- Modal -->
        <div id="success-modal" class="modal">
            <div class="modal-content">
                <h2>Payment Successful</h2>
                <p>Your payment has been processed successfully and your order has been placed.</p>
                <button class="modal-button" onclick="window.location.href = '/orders';">View Order Details</button>
            </div>
        </div>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const cartItems = JSON.parse(localStorage.getItem('cart')) || [];
            let totalAmount = 0;
            const cartItemsContainer = document.getElementById('cart-items');
            const errorMessageElement = document.getElementById('error-message');
            const payButton = document.getElementById('pay-button');
            const loadingElement = document.getElementById('loading');
            
            cartItemsContainer.innerHTML = '';

            function showError(message) {
                errorMessageElement.textContent = message;
                errorMessageElement.style.display = 'block';
                payButton.disabled = false;
                loadingElement.style.display = 'none';
            }

            if (cartItems.length === 0) {
                showError("Your cart is empty. Please add items before proceeding.");
                payButton.disabled = true;
                return;
            }

            try {
                cartItems.forEach(item => {
                    if (!item.price || isNaN(item.price) || !item.quantity || isNaN(item.quantity)) {
                        throw new Error('Invalid cart item data');
                    }
                    totalAmount += item.price * item.quantity;
                    cartItemsContainer.innerHTML += `    
                        <div class="cart-item">
                            <img src="${item.image || 'placeholder.jpg'}" alt="${item.name}">
                            <div>
                                <div class="item-name">${item.name}</div>
                                <div class="item-price">₹${item.price} x ${item.quantity}</div>
                                <div class="item-description">${item.description || 'No description available.'}</div>
                            </div>
                        </div>`;
                });
            } catch (error) {
                showError("There was an error processing your cart. Please try again.");
                console.error('Cart processing error:', error);
                return;
            }
            
            document.getElementById('total-amount').textContent = totalAmount;

            document.getElementById('pay-button').onclick = async function () {
                try {
                    payButton.disabled = true;
                    loadingElement.style.display = 'block';
                    errorMessageElement.style.display = 'none';

                    const token = localStorage.getItem('token');
                    if (!token) {
                        throw new Error('Please login to continue');
                    }

                    const address = document.getElementById('address').value.trim();
                    if (!address) {
                        throw new Error("Please provide a delivery address.");
                    }

                    const userResponse = await fetch('/api/users/profile', {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    if (!userResponse.ok) throw new Error('Failed to authenticate user');

                    const userData = await userResponse.json();
                    if (!userData.user || !userData.user._id) {
                        throw new Error('Invalid user data received');
                    }

                    const transactionResponse = await fetch('/api/orders/transaction', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}` 
                        },
                        body: JSON.stringify({ amount: totalAmount, userId: userData.user._id })
                    });
                    if (!transactionResponse.ok) {
                        const errorData = await transactionResponse.json();
                        throw new Error(errorData.message || 'Failed to create transaction');
                    }

                    const transactionData = await transactionResponse.json();

                    if (transactionData.success) {
                        const options = {
                            key: transactionData.key,
                            amount: totalAmount * 100,
                            currency: "INR",
                            name: "Your Company Name",
                            description: "Order Payment",
                            order_id: transactionData.order_id,
                            handler: function (response) {
                                showModal();
                            },
                            prefill: { 
                                name: userData.user.name,
                                email: userData.user.email,
                                contact: userData.user.contact
                            },
                            notes: {
                                address: address
                            }
                        };
                        
                        const rzp = new Razorpay(options);
                        rzp.open();
                    } else {
                        showError(transactionData.message || 'Transaction failed. Please try again.');
                    }
                } catch (error) {
                    showError(error.message || 'An error occurred while processing your payment.');
                }
            };

            function showModal() {
                const modal = document.getElementById('success-modal');
                modal.style.display = 'block';
            }

            window.onclick = function(event) {
                const modal = document.getElementById('success-modal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            };
        });
    </script>
</body>
</html>
